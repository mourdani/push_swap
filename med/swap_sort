#include "header.h"
#include <stdio.h>

int	two_pos(t_stack a, int n)
{
	if (n > a.max_i)
		n = n - a.max_i - 2;
	else if (n < 0)
		n = n + a.max_i;
	return (n);
}

void	swap_sort(t_stack a, t_stack b, int one, int two)
{
	int n;
	int n2;


	if (one == two)
		return;
	else if (one > two)
	{
		n = one;
		one = two;
		two = n;
	}
	n = rotate_to_top(a, one);
//	print_stacks(a,b);
//	printf("after rotate\n");
//	printf("-----------------\n");

	push(&a, &b);
//	print_stacks(a,b);
//	printf("after push\n");
//	printf("-----------------\n");

	two = two_pos(a, two + n);
//	printf("\ntwo = %d\n", two);

	n2 = rotate_to_top(a, two);
//	print_stacks(a,b);
//	printf("after rotate\n");
//	printf("-----------------\n");

//	printf("\nn2 = %d\n", n2);

	push(&a, &b);
//	print_stacks(a,b);
//	printf("after push\n");
//	printf("-----------------\n");

	swap (&b);
//	print_stacks(a,b);
//	printf("-----------------\n");

	push(&b, &a);
//	print_stacks(a,b);
//	printf("after push\n");
//	printf("-----------------\n");

	rotate_ntimes(a, -n2);
	push(&b, &a);
	rotate_ntimes(a, -n);
}

int	rotate_to_top(t_stack a, int n)
{
	if (n == 0)
	{
		rotate_ntimes(a, -1);
		return (-1);
	}
	else if (n == a.max_i)
		return (0);
	else if (n <= (a.max_i / 2))
	{
		rotate_ntimes(a, (n + 1) * -1);
		return ((n + 1) * -1);
	}
	else if (n > (a.max_i / 2))
	{
		rotate_ntimes(a, a.max_i - n);
		return (a.max_i - n);
	}
}

void	rotate_ntimes(t_stack a, int n)
{
	if  (n > 0)
	{
		while (n >= 0)
		{
			rotate(&a);
			n--;
		}
	}
	if (n < 0)
	{
		while (n < 0)
		{
			rrotate(&a);
			n++;
		}
	}
}
